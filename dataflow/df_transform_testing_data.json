{
	"name": "df_transform_testing_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_testing_source",
						"type": "DatasetReference"
					},
					"name": "TestingSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookupSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_source_lookup",
						"type": "DatasetReference"
					},
					"name": "DimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_processed_testing",
						"type": "DatasetReference"
					},
					"name": "SinkTestingData"
				}
			],
			"transformations": [
				{
					"name": "LookupCountryData"
				},
				{
					"name": "SelectReqdFieldForJoin"
				},
				{
					"name": "JoinwithDimDateSource"
				},
				{
					"name": "AggregateDimDate"
				},
				{
					"name": "SelectReqdFieldForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as integer,",
				"          tests_done as integer,",
				"          population as integer,",
				"          testing_rate as double,",
				"          positivity_rate as double,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TestingSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookupSource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDateSource",
				"TestingSource, CountryLookupSource lookup(TestingSource@country == CountryLookupSource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountryData",
				"LookupCountryData select(mapColumn(",
				"          country = TestingSource@country,",
				"          year_week,",
				"          new_cases,",
				"          tests_done,",
				"          population = TestingSource@population,",
				"          testing_data_source,",
				"          country_code_2_digit,",
				"          country_code_3_digit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqdFieldForJoin",
				"SelectReqdFieldForJoin, AggregateDimDate join(year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinwithDimDateSource",
				"DimDateSource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggregateDimDate",
				"JoinwithDimDateSource select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          week_start_date,",
				"          week_end_date,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqdFieldForSink",
				"SelectReqdFieldForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['testing.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkTestingData"
			]
		}
	}
}